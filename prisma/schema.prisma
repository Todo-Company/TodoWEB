generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Todo {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  completed   Boolean
  created     DateTime     @db.Date
  goalDate    DateTime     @db.Date
  title       String
  type        TodoEnum
  priority    PriorityEnum
  expectation Int
  userId      String       @db.ObjectId
  subTodos    SubTodo[]  
}

model SubTodo {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  completed       Boolean
  created         DateTime     @db.Date
  goalDate        DateTime     @db.Date
  title           String
  type            TodoEnum
  priority        PriorityEnum
  expectation     Int
  todoId          String       @db.ObjectId
  todo            Todo         @relation(fields: [todoId], references: [id])
  userId          String       @db.ObjectId
  subTodos        SubTodo[]    @relation("SubTodoToSubTodo")
  parentSubTodoId String?      @db.ObjectId
  parentSubTodo   SubTodo?     @relation("SubTodoToSubTodo", fields: [parentSubTodoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

type TimeRange {
  startTime DateTime
  endTime   DateTime
}

enum TodoEnum {
  SIMPLE
  SEQUENTIAL
  SECTION
}

enum PriorityEnum {
  LOW
  MEDIUM
  HIGH
}

// type TodoSubTodos {
//   completed Boolean
//   created   DateTime @db.Date
//   goalDate  DateTime @db.Date
//   title     String
//   type      TodoType
// }

// model Todo {
//   id        String         @id @default(auto()) @map("_id") @db.ObjectId
//   completed Boolean
//   created   DateTime       @db.Date
//   goalDate  DateTime       @db.Date
//   subTodos  TodoSubTodos[]
//   title     String
//   type      TodoType
//   userId    String         @db.ObjectId
// }
